CREATE TYPE public.user_status AS ENUM ('ONLINE', 'OFFLINE');
CREATE TYPE public.user_meta_type as ENUM('MUTE', 'BLOCK');
-- USER
CREATE TABLE public.users (
    id uuid NOT NULL PRIMARY KEY,
    username text NOT NULL UNIQUE,
    about text,
    biography VARCHAR(160),
    status user_status DEFAULT 'OFFLINE'::public.user_status
);
CREATE TABLE public.user_follows (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    follower uuid REFERENCES public.users(id) NOT NULL,
    following uuid REFERENCES public.users(id) NOT NULL,
    subscribed BOOLEAN DEFAULT FALSE
);
CREATE TABLE public.user_meta (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    owner uuid REFERENCES public.users NOT NULL,
    user uuid REFERENCES public.users NOT NULL,
    meta_type user_meta_type NOT NULL,
);
CREATE POLICY ON public.users;
CREATE POLICY "Allow only ";
CREATE POLICY "Allow only user creator and auth to" TO;
-- TOPICS
CREATE TABLE public.topics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);
CREATE TABLE public.topic_followers (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    topic_id uuid REFERENCES public.topics NOT NULL,
    user_id uuid REFERENCES public.users ON DELETE CASCADE NOT NULL
);
CREATE POLICY "Allow read only";
CREATE POLICY "Deny write access";
CREATE POLICY "Allow only user";
-- STORY
CREATE TABLE public.stories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    author uuid REFERENCES public.users NOT NULL,
    title VARCHAR() NOT NULL,
    description VARCHAR() NOT NULL,
    seo JSON NOT NULL,
    content JSON NOT NULL,
    published BOOLEAN DEFAULT true NOT NULL,
    updated_at TIMESTAMP WiTH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);
CREATE TABLE public.story_comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    story_id BIGINT REFERENCES public.stories NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    content JSON NOT NULL
);
CREATE TABLE public.story_likes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    story_id BIGINT REFERENCES public.stories NOT NULL,
    user_id uuid REFERENCES public.users ON DELETE CASCADE NOT NULL,
    CONSTRAINT ("story_id", "user_id")
);
CREATE POLICY "Allow read if published";
CREATE POLICY "Allow write if auth.user() is author";
CREATE POLICY "Allow all on comment";
CREATE POLICY "Deny update on comment if auth.user() <> user";
-- LISTS
CREATE TABLE public.lists (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT REFERENCES public.users,
    name VARCHAR(60) NOT NULL,
    description VARCHAR(280) NOT NULL,
    private BOOLEAN NOT NULL DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);
CREATE TABLE public.saved_lists (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT REFERENCES public.users,
    list_id BIGINT REFERENCES public.lists
);
CREATE POLICY "Allow read if not private else only owner";
CREATE POLICY "Allow write only to user";
CREATE POLICY "Allow write only to user";
-- HISTORY
CREATE TABLE public.histories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT REFERENCES public.users,
    story_id BIGINT REFERENCES public.stories,
    updated_at TIMESTAMP WiTH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);
CREATE POLICY "Allow read and write to history owner only";
